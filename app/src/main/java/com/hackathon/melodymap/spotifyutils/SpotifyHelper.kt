package com.hackathon.melodymap.spotifyutils

import android.content.Context
import android.util.Log
import com.hackathon.melodymap.SharedPreferencesManager
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import org.json.JSONArray
import org.json.JSONObject
import java.io.IOException

class SpotifyHelper(private val context: Context) {

    companion object {
        private const val TAG = "SpotifyHelper"
        private const val BASE_URL = "https://api.spotify.com/v1"
    }

    private val client = OkHttpClient()

    fun getUserId(accessToken: String): String {
        val request = Request.Builder()
            .url("$BASE_URL/me")
            .addHeader("Authorization", "Bearer $accessToken")
            .build()

        val response = client.newCall(request).execute()
        val jsonResponse = JSONObject(response.body?.string() ?: "")
        Log.d(TAG, "User ID response: $jsonResponse")
        return jsonResponse.getString("id")
    }

    fun createPlaylist(accessToken: String, userId: String, playlistName: String): String {
        val json = JSONObject()
        json.put("name", playlistName)
        json.put("description", "Generated by MelodyMap")
        json.put("public", false)

        val body = RequestBody.create("application/json".toMediaTypeOrNull(), json.toString())
        val request = Request.Builder()
            .url("$BASE_URL/users/$userId/playlists")
            .addHeader("Authorization", "Bearer $accessToken")
            .post(body)
            .build()

        val response = client.newCall(request).execute()
        val jsonResponse = JSONObject(response.body?.string() ?: "")
        Log.d(TAG, "Create playlist response: $jsonResponse")
        if (!jsonResponse.has("id")) {
            Log.e(TAG, "No value for 'id' in response: $jsonResponse")
        }
        return jsonResponse.getString("id")
    }

    fun searchTrack(accessToken: String, query: String): String? {
        val url = "$BASE_URL/search?q=${query.replace(" ", "%20")}&type=track&limit=1"
        val request = Request.Builder()
            .url(url)
            .addHeader("Authorization", "Bearer $accessToken")
            .build()

        val response = client.newCall(request).execute()
        val jsonResponse = JSONObject(response.body?.string() ?: "")
        val tracks = jsonResponse.getJSONObject("tracks").getJSONArray("items")
        Log.d(TAG, "Search track response: $jsonResponse")
        if (tracks.length() > 0) {
            return tracks.getJSONObject(0).getString("uri")
        }
        return null
    }

    fun addTracksToPlaylist(accessToken: String, playlistId: String, trackUris: List<String>) {
        val json = JSONObject()
        json.put("uris", JSONArray(trackUris))

        val body = RequestBody.create("application/json".toMediaTypeOrNull(), json.toString())
        val request = Request.Builder()
            .url("$BASE_URL/playlists/$playlistId/tracks")
            .addHeader("Authorization", "Bearer $accessToken")
            .post(body)
            .build()

        val response = client.newCall(request).execute()
        if (!response.isSuccessful) {
            Log.e(TAG, "Failed to add tracks to playlist: ${response.message}")
        }
    }
}
