package com.hackathon.melodymap.network

import android.util.Log
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

object SpotifyClient {
    private const val BASE_URL = "https://api.spotify.com/"
    lateinit var spotifyService: SpotifyService

    fun init() {
        val retrofit = Retrofit.Builder()
            .baseUrl(BASE_URL)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
        spotifyService = retrofit.create(SpotifyService::class.java)
    }

    fun createPlaylist(userId: String, token: String, playlistName: String, callback: (String?) -> Unit) {
        val request = PlaylistRequest(playlistName, "Generated by MelodyMap", true)
        spotifyService.createPlaylist(userId, "Bearer $token", request).enqueue(object : retrofit2.Callback<PlaylistResponse> {
            override fun onResponse(call: retrofit2.Call<PlaylistResponse>, response: retrofit2.Response<PlaylistResponse>) {
                if (response.isSuccessful) {
                    callback(response.body()?.id)
                } else {
                    Log.e("SpotifyClient", "Error creating playlist: ${response.errorBody()?.string()}")
                    callback(null)
                }
            }

            override fun onFailure(call: retrofit2.Call<PlaylistResponse>, t: Throwable) {
                Log.e("SpotifyClient", "Failed to create playlist", t)
                callback(null)
            }
        })
    }

    fun searchTrack(token: String, trackName: String, callback: (String?) -> Unit) {
        spotifyService.searchTrack(trackName, "track", "Bearer $token").enqueue(object : retrofit2.Callback<SearchResponse> {
            override fun onResponse(call: retrofit2.Call<SearchResponse>, response: retrofit2.Response<SearchResponse>) {
                if (response.isSuccessful) {
                    val trackUri = response.body()?.tracks?.items?.firstOrNull()?.uri
                    callback(trackUri)
                } else {
                    Log.e("SpotifyClient", "Error searching track: ${response.errorBody()?.string()}")
                    callback(null)
                }
            }

            override fun onFailure(call: retrofit2.Call<SearchResponse>, t: Throwable) {
                Log.e("SpotifyClient", "Failed to search track", t)
                callback(null)
            }
        })
    }

    fun addTracksToPlaylist(playlistId: String, token: String, trackUris: List<String>, callback: (Boolean) -> Unit) {
        val request = TracksRequest(trackUris)
        spotifyService.addTracksToPlaylist(playlistId, "Bearer $token", request).enqueue(object : retrofit2.Callback<Void> {
            override fun onResponse(call: retrofit2.Call<Void>, response: retrofit2.Response<Void>) {
                if (response.isSuccessful) {
                    callback(true)
                } else {
                    Log.e("SpotifyClient", "Error adding tracks to playlist: ${response.errorBody()?.string()}")
                    callback(false)
                }
            }

            override fun onFailure(call: retrofit2.Call<Void>, t: Throwable) {
                Log.e("SpotifyClient", "Failed to add tracks to playlist", t)
                callback(false)
            }
        })
    }
}
